import React from 'react';
import { render, waitFor } from '@testing-library/react-native';
import { View, Text } from 'react-native';
import Contributions from './Contributions'; 
import AsyncStorage from '@react-native-async-storage/async-storage';
import { BASIC_API } from '../../../utils/BASIC_API'; 

const mockContributionsData = [
  {
    "id": "01964899-a875-7071-b7ea-ebe2d05747a9",
    "userId": "4ddb0aa8-237b-4adf-912b-b0ce2ef7d11a",
    "date": "2025-04-18T00:00:00Z",
    "amount": 4,
    "user": null
  },
  {
    "id": "02964899-a875-7071-b7ea-ebe2d05747b8",
    "userId": "4ddb0aa8-237b-4adf-912b-b0ce2ef7d11a",
    "date": "2025-04-15T00:00:00Z",
    "amount": 2,
    "user": null
  },
  {
    "id": "03964899-a875-7071-b7ea-ebe2d05747c7",
    "userId": "4ddb0aa8-237b-4adf-912b-b0ce2ef7d11a",
    "date": "2025-03-10T00:00:00Z",
    "amount": 5,
    "user": null
  },
  {
    "id": "04964899-a875-7071-b7ea-ebe2d05747d6",
    "userId": "4ddb0aa8-237b-4adf-912b-b0ce2ef7d11a",
    "date": "2024-12-01T00:00:00Z",
    "amount": 1,
    "user": null
  }
];

// –ú–æ–∫–∞—î–º–æ –º–æ–¥—É–ª—ñ
jest.mock('@react-native-async-storage/async-storage', () => ({
  getItem: jest.fn()
}));

// –ú–æ–∫–∞—î–º–æ –≥–ª–æ–±–∞–ª—å–Ω–∏–π fetch
global.fetch = jest.fn();

// –ú–æ–∫–∞—î–º–æ console.log —ñ console.error —â–æ–± –Ω–µ –∑–∞–±—Ä—É–¥–Ω—é–≤–∞—Ç–∏ –≤–∏–≤—ñ–¥ –ø—Ä–∏ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—ñ
const originalConsoleLog = console.log;
const originalConsoleError = console.error;

describe('Contributions Component', () => {
  const mockUserToken = 'test-user-token-123';

  // –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø–µ—Ä–µ–¥ –∫–æ–∂–Ω–∏–º —Ç–µ—Å—Ç–æ–º
  beforeEach(() => {
    // –û—á–∏—â–∞—î–º–æ –≤—Å—ñ –º–æ–∫–∏
    jest.clearAllMocks();
    
    // –ú–æ–∫–∞—î–º–æ –¥–∞—Ç—É –¥–ª—è —Å—Ç–∞–±—ñ–ª—å–Ω–æ—Å—Ç—ñ —Ç–µ—Å—Ç—ñ–≤
    jest.spyOn(global, 'Date').mockImplementation(() => 
      new Date('2025-05-01T12:00:00Z')
    );
    
    // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –º–æ–∫ –¥–ª—è AsyncStorage.getItem
    AsyncStorage.getItem.mockResolvedValue(mockUserToken);
    
    // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –º–æ–∫ –¥–ª—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ fetch
    global.fetch.mockResolvedValue({
      ok: true,
      json: () => Promise.resolve(mockContributionsData)
    });
    
    // –ú–æ–∫–∞—î–º–æ console.log —ñ console.error
    console.log = jest.fn();
    console.error = jest.fn();
  });
  
  // –í—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—ñ—Å–ª—è –∫–æ–∂–Ω–æ–≥–æ —Ç–µ—Å—Ç—É
  afterEach(() => {
    // –í—ñ–¥–Ω–æ–≤–ª—é—î–º–æ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω—ñ console.log —ñ console.error
    console.log = originalConsoleLog;
    console.error = originalConsoleError;
    
    // –í—ñ–¥–Ω–æ–≤–ª—é—î–º–æ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω—É Date
    jest.restoreAllMocks();
  });
  
  // –¢–µ—Å—Ç–∏
  it('renders the header correctly', () => {
    const { getByText } = render(<Contributions />);
    expect(getByText('üèãÔ∏è‚Äç‚ôÇÔ∏è Gym Activity (52 —Ç–∏–∂–Ω—ñ)')).toBeTruthy();
  });
  
  it('fetches data with correct authorization header', async () => {
    render(<Contributions />);
    
    await waitFor(() => {
      // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —â–æ AsyncStorage.getItem –±—É–≤ –≤–∏–∫–ª–∏–∫–∞–Ω–∏–π –∑ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–º –∫–ª—é—á–µ–º
      expect(AsyncStorage.getItem).toHaveBeenCalledWith('userToken');
      
      // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —â–æ fetch –±—É–≤ –≤–∏–∫–ª–∏–∫–∞–Ω–∏–π –∑ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
      expect(global.fetch).toHaveBeenCalledWith(
        `${BASIC_API}/contribution`, 
        {
          method: 'GET',
          headers: {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${mockUserToken}`
          }
        }
      );
    });
  });
  
  
  
  it('displays correct color for different contribution amounts', () => {
    // –Ü–º–ø–æ—Ä—Ç—É—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é getColor –∑ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
    const { getColor } = require('./Contributions');
    
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —â–æ getColor –ø–æ–≤–µ—Ä—Ç–∞—î –ø—Ä–∞–≤–∏–ª—å–Ω—ñ –∫–æ–ª—å–æ—Ä–∏ –¥–ª—è —Ä—ñ–∑–Ω–∏—Ö –∑–Ω–∞—á–µ–Ω—å
    expect(getColor(0)).toBe('#ebedf0');  // –ù—É–ª—å–æ–≤–∏–π –≤–Ω–µ—Å–æ–∫
    expect(getColor(1)).toBe('#c6e48b');  // –ú–∞–ª–∏–π –≤–Ω–µ—Å–æ–∫
    expect(getColor(3)).toBe('#7bc96f');  // –°–µ—Ä–µ–¥–Ω—ñ–π –≤–Ω–µ—Å–æ–∫
    expect(getColor(5)).toBe('#239a3b');  // –í–µ–ª–∏–∫–∏–π –≤–Ω–µ—Å–æ–∫
    expect(getColor(7)).toBe('#196127');  // –î—É–∂–µ –≤–µ–ª–∏–∫–∏–π –≤–Ω–µ—Å–æ–∫
  });
  
  it('renders squares with the right colors based on contribution data', async () => {
    // –ü–µ—Ä—à –∑–∞ –≤—Å–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ –ø—Ä–∏–≤–µ—Å—Ç–∏ Contributions.jsx —É –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—ñ—Å—Ç—å –¥–æ —Ç–µ—Å—Ç—É:
    // –î–æ–¥–∞—Ç–∏ export –¥–ª—è getColor: export const getColor = (count) => { ... }
    
    const { UNSAFE_root } = render(<Contributions />);
    
    await waitFor(() => {
      // –ó–Ω–∞—Ö–æ–¥–∏–º–æ –≤—Å—ñ –∫–≤–∞–¥—Ä–∞—Ç–∏–∫–∏ (–µ–ª–µ–º–µ–Ω—Ç–∏ View –∑ —Ä–æ–∑–º—ñ—Ä–æ–º 10x10)
      const squares = UNSAFE_root.findAllByProps(node => {
        if (!node.props || !node.props.style) return false;
        const styles = Array.isArray(node.props.style) ? node.props.style : [node.props.style];
        return styles.some(style => style.width === 10 && style.height === 10);
      });
      
      // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —â–æ –ø–µ–≤–Ω—ñ –∫–≤–∞–¥—Ä–∞—Ç–∏–∫–∏ –º–∞—é—Ç—å –æ—á—ñ–∫—É–≤–∞–Ω–∏–π –∫–æ–ª—ñ—Ä
      expect(squares.length).toBeGreaterThan(0);
    });
  });
  
  it('handles API error gracefully', async () => {
    // –¢—É—Ç –º–æ–∫—É—î–º–æ fetch, —â–æ–± –≤—ñ–Ω –ø–æ–≤–µ—Ä–Ω—É–≤ –ø–æ–º–∏–ª–∫—É
    global.fetch.mockRejectedValueOnce(new Error('Network Error'));
    
    render(<Contributions />);
    
    await waitFor(() => {
      // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —â–æ –ø–æ–º–∏–ª–∫–∞ –±—É–ª–∞ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∞
      expect(console.error).toHaveBeenCalledWith(
        'Error fetching contributions:', 
        expect.any(Error)
      );
    });
  });
  
  it('handles non-OK API response', async () => {
    // –ú–æ–∫—É—î–º–æ fetch, —â–æ–± –≤—ñ–Ω –ø–æ–≤–µ—Ä–Ω—É–≤ –Ω–µ-OK –≤—ñ–¥–ø–æ–≤—ñ–¥—å
    global.fetch.mockResolvedValueOnce({
      ok: false,
      status: 403,
      statusText: 'Forbidden'
    });
    
    render(<Contributions />);
    
    await waitFor(() => {
      // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —â–æ –ø–æ–º–∏–ª–∫–∞ –±—É–ª–∞ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∞
      expect(console.error).toHaveBeenCalledWith(
        'Error fetching contributions:', 
        expect.any(Error)
      );
    });
  });
  
  it('creates snapshot that matches', () => {
    const tree = render(<Contributions />).toJSON();
    expect(tree).toMatchSnapshot();
  });
});